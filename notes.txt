Software Requirements
    Nodes.js
    Any Editor (Visual Studio Code)

Schedule:
    Session - 1 : 90 mins
    Tea Break   : 20 mins
    Session - 2 : 90 mins
    Lunch Break : 60 mins
    Session - 3 : 90 mins
    Tea Break   : 20 mins
    Session - 4 : 90 mins

Methodology:
    * No powerpoints
    * 100% code driven class

About You:
    Name
    Experience in JS (Frameworks etc)
    Any specific expectations?
        Testing

JavaScript Language Overview (ES5)
    Data Types
        string
        number
        boolean
        object
        function
        undefined

    Constructs
        var, if else, switch case, for, try catch finally, throw, function

    APIs
        Array, Object, Function, Math, Regex, Error, setTimeout, setInterval, clearTimeout, clearInterval

1. Loosely typed language
2. Dynamic Language
3. Object Based Language
4. Functional Language (not a pure functional language)

sum(10,20) => 30
sum(10, "20") => 30
sum(10, "abc") => 10
sum(10,20,30,40,50) => 150
sum() => 0
sum([10,20,30],[40,50,60]) => 210
sum([10,"20",30],[40,50,"abc"]) => 150
sum([10,["20",30]],[40,50,60, "abc"]) => 210
sum(function(){ return 10;}, function(){ return 20;}) => 30
sum(function(){ return [10,["20",30]];}, function(){ return [40,50,60, "abc"]; }) => 210
sum([function(){ return [10,["20",30]];}, function(){ return [40,50,60, "abc"]; }]) => 210

$(domNode)
$([domNode1, domNode2])
$('selector')
$(function(){

})


npm init -y
npm install --save-dev jest

Implicit Values in a function
    - this (invocation context)
        It does not matter where the function is OR who owns the function. What matters is "how the function is invoked"

    - arguments
        array like object containing all the argument values passed to the function
        arguments.length
        arguments[0]
        arguments[1]

Function invocation patterns
    1. As a method of an object
        this -> object
    2. As a function
        this -> global scope (window in the browser)
    3. Using the "call" method of the function
    4. Using the "apply" method of the function
    5. Immediately Invoked Function Expression (IIFE)


Functional Language
    Functions are first class citizens (treat functions like data)
        1. Create functions like object
        2. Functions can have attributes
        3. Functions can have methods
        4. Functions can be passed as arguments
        5. Functions can be returned as return values from other functions

z = x || y
    if x is truthy, return x
        else return y

If the boolean equivalent of a value is true, then the value is "truthy"

Falsy = 0, '', null, undefined, NaN, false

Memoization
    Technique used to write functions that can remember its results

    function isPrime(no){
        console.log('processing ', no)
        for (var i = 2; i <= (no/2); i++){
            if (no % i === 0){
                return false
            }
        }
        return true
    }

    Pure function
        A function that has NO side effects
        The functions output for the given input never changes
        The invocation of a function should be able to be replaced with the result of the function without changing the outcome.

        fn(x) => z
        fn(x1) => z1

    
    Impure Functions
        =================
        var z = 100
        function add(x,y){ // depends on data that it not explicitly given as input
            return x + y + z
        }

        ===================
        function add(x,y){ // communicating to external resources (console)
            console.log('processing ', x , ' and ', y)
            return x + y
        }
        function addClient(){
            var result = add(100, 200)
            console.log('result : ', result);
        }

        ===================
        
        Memoized IsPrime function
        function isPrime(no){
            isPrime['cache'] = isPrime['cache'] || {}
            if (isPrime.cache.hasOwnProperty(no)) return isPrime.cache[no];
            console.log('processing ', no)
            isPrime.cache[no] = true
            for (var i = 2; i <= (no/2); i++){
                if (no % i === 0){
                    isPrime.cache[no] = false
                    break
                }
            }
            return isPrime.cache[no]
        }

Closures
    Create a html page with a button[Track] and a div
    Track the number of times the button is clicked and display the count in the div


    Assignment
        (NO HTML, NO BUTTON, NO EVENT HANDLERS)
        Create an object and assign it to a variable 'spinner'
            var spinner = /* ? */
        The spinner object must have the following methods
            - up()
            - down()
        The following is the behavior of the above methods
            spinner.up() //=> 1
            spinner.up() //=> 2
            spinner.up() //=> 3

            spinner.down() //=> 2
            spinner.down() //=> 1
            spinner.down() //=> 0
            spinner.down() //=> -1
        IMPORTANT:
            There should NO WAY by which the behavior of the spinner object can be influenced from outside
            The following SHOULD NOT be possible
            =======
                spinner.count = 10000
                spinner.up() //=> SHOULD NOT RETURN 10001
            =======
                window.count = 10000
                spinner.up() //=> SHOULD NOT RETURN 10001
