Software Requirements
    Nodes.js
    Any Editor (Visual Studio Code)

Schedule:
    Session - 1 : 90 mins
    Tea Break   : 20 mins
    Session - 2 : 90 mins
    Lunch Break : 60 mins
    Session - 3 : 90 mins
    Tea Break   : 20 mins
    Session - 4 : 90 mins

Methodology:
    * No powerpoints
    * 100% code driven class

About You:
    Name
    Experience in JS (Frameworks etc)
    Any specific expectations?
        Testing

JavaScript Language Overview (ES5)
    Data Types
        string
        number
        boolean
        object
        function
        undefined

    Constructs
        var, if else, switch case, for, try catch finally, throw, function

    APIs
        Array, Object, Function, Math, Regex, Error, setTimeout, setInterval, clearTimeout, clearInterval

1. Loosely typed language
2. Dynamic Language
3. Object Based Language
4. Functional Language (not a pure functional language)

sum(10,20) => 30
sum(10, "20") => 30
sum(10, "abc") => 10
sum(10,20,30,40,50) => 150
sum() => 0
sum([10,20,30],[40,50,60]) => 210
sum([10,"20",30],[40,50,"abc"]) => 150
sum([10,["20",30]],[40,50,60, "abc"]) => 210
sum(function(){ return 10;}, function(){ return 20;}) => 30
sum(function(){ return [10,["20",30]];}, function(){ return [40,50,60, "abc"]; }) => 210
sum([function(){ return [10,["20",30]];}, function(){ return [40,50,60, "abc"]; }]) => 210

$(domNode)
$([domNode1, domNode2])
$('selector')
$(function(){

})


npm init -y
npm install --save-dev jest

Implicit Values in a function
    - this (invocation context)
        It does not matter where the function is OR who owns the function. What matters is "how the function is invoked"

    - arguments
        array like object containing all the argument values passed to the function
        arguments.length
        arguments[0]
        arguments[1]

Function invocation patterns
    1. As a method of an object
        this -> object
    2. As a function
        this -> global scope (window in the browser)
    3. Using the "call" method of the function
    4. Using the "apply" method of the function
